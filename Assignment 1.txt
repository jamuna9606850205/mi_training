list

1.write a python program to sum all the items in a list.

##list

total= 0
list1= [11,5,17,18,23]
for ele in range (0,len(list1)):
    total= total +list1[ele]
    print("sum of all elements in given list:",total)


output:
sum of all elements in given list: 11
sum of all elements in given list: 16
sum of all elements in given list: 33
sum of all elements in given list: 51
sum of all elements in given list: 74


2. Create a function that takes a list of number as input and return a new 
list with only the even number from the original list.

##list

list1=[10,21,4,45,66,93]
for num in list1:
    if num % 2 == 0:
        print(num,end="")

output:
10466


3. Write a python program to remove duplicate from a list.

##list

def remove (duplicate):
    final_list=[]
    for num in duplicate:
        if num not in final_list:
            final_list.append(num)
    return final_list
duplicate=[2,4,10,20,5,2,20,4]
print(remove(duplicate))

output:
[2, 4, 10, 20, 5]


4. Implement a function to find the second largest number in a list.

##list

list1= [10,20,4,45,99]
mx= max(list1[0],list1[1])
secondmax= min(list1[0],list1[1])
n= len(list1)
for i in range(2,n):
    if list1[i]> mx:
        secondmax = mx
        mx = list1[i]
    elif list1[i] > secondmax and \
        mx != list[i]:
        secondmax = list1[i]
    elif mx == secondmax and \
    secondmax != list1[i]:
      secondmax = list1[i]
print("second highest number is:",\
      str(secondmax))

output:
second highest number is: 45


5. Write a python program to shuffle and print a list.

##list

from random import shuffle
color=['red','green','white','black','pink','yellow']
shuffle(color)
print(color)

output:
['green', 'red', 'black', 'pink', 'yellow', 'white']



##Tuple

1. Write a python program to reverse a tuple

## tuple

def reverse(tuple):
    new_tup = tuple[: :-1]
    return new_tup
tuple = ('z','a','d','f','g','e','e','k')
print(reverse(tuple))

output:
('k', 'e', 'e', 'g', 'f', 'd', 'a', 'z')


2. Create a function that takes two tuple as input and return
a new tuple containing elements that are common in both tuple.

## tuple

test_tup1 = (1,3,5)
test_tup2 = (4,6)
print("the original tuple 1 : " + str(test_tup1))
print("the original tuple 2 : " + str(test_tup2))
res = test_tup1 + test_tup2
print("the tuple after concatenation is : " + str(res))

output:
the original tuple 1 : (1, 3, 5)
the original tuple 2 : (4, 6)
the tuple after concatenation is : (1, 3, 5, 4, 6)


3. Write a python program to convert a tuple to a string

## tuple

def convertTuple(tup):
    str = ' '
    for item in tup:
        str = str + item
    return str
tuple = ('g','e','e','k','s')
str = convertTuple(tuple)
print(str)

output:
geeks


4. Implements a function to find the index of an element in a tuple

## tuple

tup = (22,3,45,4,2.4,2,56,890,1)
print(tup[-4])

output:
2


5.Create a program to concatenate two tuple.

##tuple

test_tup1 = (1,3,5)
test_tup2 = (4,6)
print("The original tuple 1 : " + str(test_tup1))
print("The original tuple 2 : " + str(test_tup2))
res = test_tup1 + test_tup2
print("the tuple after concatenation is : " + str(res))

output:
the original tuple 1:(1,3,5)
the original tuple 2:(4,6)
the tuple after concatenation is:(1,3,5,4,6)


##Dictionaries:

1. Write a python script to sort (ascending and descending) a dictionary by its values.

##dict

import operator
d= {1: 2, 3: 4, 4: 3, 2: 1, 0:0}
print('Original dictionary : ',d)
sorted_d = sorted(d.items(), key=operator.itemgetter(1))
print('Dictionary in ascending order by value : ',sorted_d)
sorted_d = dict( sorted(d.items(), key=operator.itemgetter(1), reverse=True))
print('Dictionary in descending order by value : ',sorted_d)

output:
Original dictionary :  {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
Dictionary in ascending order by value :  [(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
Dictionary in descending order by value :  {3: 4, 4: 3, 1: 2, 2: 1, 0: 0}


2. Create a function that takes a dictionary as input and return the sum
of all its value.

##dict

def returnSum(myDict) :
    list = []
    for i in myDict :
        list.append(myDict[i])
    final = sum(list)
    return final
dict = {'á': 100, 'b': 200, 'd': 300}
print("Sum :", returnSum(dict))

output:
Sum : 600


3. Write a python program to combine two dictionary adding value for common keys.

##dict

dict1 = {'á': 12, 'for' : 25, 'ç' : 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}
for key in dict2:
    if key in dict1:
        dict2[key] = dict2[key] + dict1[key]
    else:
        pass
print(dict2)  

output:
{'Geeks': 100, 'geek': 200, 'for': 325}


4. Implements a function to check if a given key already exists in a dictionary.

##dict

def checkKey(dic, key):
    if key in  dict.keys():
        print("Present, ",end =" ")
        print("value =", dic[key])
    else:
        print("Not present")
dic = {'á': 100,'b':200, 'ç':300}
key = 'b'
checkKey(dic, key)

key = 'w'
checkKey(dic, key)

output:
Present,  value = 200
Not present


5. Create a program to iterate over dictionaries using loops and comprehensions,
printing key-value pairs.

##dict

statesAndCapitals = {
    'Gujarat': 'Gandhinagar',
    'Maharashtra': 'Mumbai',
    'Rajasthan': 'Jaipur',
    'Bihar': 'Patna'
}
print('List of given capitals:\n')
for capital in statesAndCapitals.values():
    print(capital)

output:
List of given capitals:

Gandhinagar
Mumbai
Jaipur
Patna      


##Sets:

1. Write a python program to create a set.

##set

set1 = set()
print("Initial blank Set:  ")
print(set1)
set1 = set("GeeksForGeeks")
print("\nSet with the use of String:  ")
print(set1)
String = 'GeeksForGeeks'
set1 = set(String)
print("\nSet with the use of an Object:  ")
print(set1)
set1 = set(["Geeks", "For", "Geeks"])
print("\nSet with the use of list:  ")
print(set1)
t=("Geeks","for","Geeks")
print("\nSet with the use of tuple:  ")
print(set(t))
d={"Geeks":1, "for":2, "Geeks":3}
print("\nDet with the use of dictionary:  ")
print(set(d))

output:
Initial blank Set:  
set()

Set with the use of String:  
{'s', 'r', 'G', 'F', 'e', 'o', 'k'}

Set with the use of an Object:  
{'s', 'r', 'G', 'F', 'e', 'o', 'k'}

Set with the use of list:  
{'For', 'Geeks'}

Set with the use of tuple:  
{'for', 'Geeks'}

Det with the use of dictionary:  
{'for', 'Geeks'}


2. Create a function that takes two stes as input and return a new set
containing elements that are common in both sets.

##set

def common_member(a,b):
    a_set = set(a)
    b_set = set(b)
    if(a_set & b_set):
        print(a_set & b_set)
    else:
        print("No common elements")

a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
common_member(a,b)

a = [1, 2, 3, 4, 5]
b = [ 6, 7, 8, 9]
common_member(a,b)

output:
{5}
No common elements


3. Write a python program to find the difference between two sets.

##set

A = {10, 20, 30, 40, 80}
B = {100, 30, 80, 40, 60}
print (A.difference(B))
print (B.difference(A))

output:
{10, 20}
{100, 60}


4. Implement a function check if a set is a subset of another set.

s1 = {1, 2, 3, 4, 5}
s2 = {4,5}
print(s2.issubset(s1))

output:
True


5. Create a program to perform set operation like union, intersection, difference,
and symmetric difference.

##set

A = {0, 2, 4, 6, 8}
B = {1, 2, 3, 4, 5}
print("Union :", A | B)
print("Intersection :", A & B)
print("Difference :", A - B)
print("Symmetric difference :", A ^ B)

output:
Union : {0, 1, 2, 3, 4, 5, 6, 8}
Intersection : {2, 4}
Difference : {0, 8, 6}
Symmetric difference : {0, 1, 3, 5, 6, 8}

    